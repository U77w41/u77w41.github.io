<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deep Learning on Ujjwal Chowdhury</title><link>https://u77w41.github.io/tags/deep-learning/</link><description>Recent content in Deep Learning on Ujjwal Chowdhury</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://u77w41.github.io/tags/deep-learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Brain Tumour Classificaion</title><link>https://u77w41.github.io/p/brain-tumour-classificaion/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://u77w41.github.io/p/brain-tumour-classificaion/</guid><description>&lt;img src="https://u77w41.github.io/p/brain-tumour-classificaion/Anaplastic_astrocytoma.jpg" alt="Featured image of post Brain Tumour Classificaion" />&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>This project focuses on the classification of brain tumor images into four distinct classes: &amp;lsquo;glioma&amp;rsquo;, &amp;lsquo;meningioma&amp;rsquo;, &amp;rsquo;notumor&amp;rsquo;, and &amp;lsquo;pituitary&amp;rsquo;. The primary approach involves fine-tuning the VGG16 model using the PyTorch framework. Additionally, Python&amp;rsquo;s OpenCV library is utilized for image processing, and various image augmentation techniques are applied to enhance model generalization.&lt;/p>
&lt;p>&lt;strong>&lt;a class="link" href="https://github.com/U77w41/Brain-Tumour-Classificaion/tree/main" target="_blank" rel="noopener"
>GitHub Link&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="technologies-used">Technologies Used
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>PyTorch:&lt;/strong> The deep learning framework for model development and training.&lt;/li>
&lt;li>&lt;strong>OpenCV:&lt;/strong> Used for image processing tasks.&lt;/li>
&lt;li>&lt;strong>Python:&lt;/strong> The primary programming language for the project.&lt;/li>
&lt;/ul>
&lt;h2 id="model-architecture">Model Architecture
&lt;/h2>&lt;p>The VGG16 model is employed as the base architecture for the brain tumor classification task. The model is fine-tuned to adapt to the specific requirements of the project.&lt;/p>
&lt;h2 id="image-augmentation-techniques">Image Augmentation Techniques
&lt;/h2>&lt;p>To enhance the model&amp;rsquo;s robustness and improve generalization, the following image augmentation techniques are applied:&lt;/p>
&lt;ul>
&lt;li>Rotation&lt;/li>
&lt;li>Scaling&lt;/li>
&lt;li>Horizontal and Vertical Flipping&lt;/li>
&lt;li>Brightness and Contrast adjustments&lt;/li>
&lt;/ul>
&lt;h2 id="optimization-techniques">Optimization Techniques
&lt;/h2>&lt;p>Several optimization techniques are experimented with to fine-tune the model:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Stochastic Gradient Descent (SGD):&lt;/strong> A traditional optimization algorithm.&lt;/li>
&lt;li>&lt;strong>Adam:&lt;/strong> An adaptive learning rate optimization algorithm.&lt;/li>
&lt;li>&lt;strong>RMSprop:&lt;/strong> Another adaptive learning rate optimization algorithm.&lt;/li>
&lt;li>&lt;strong>AdaGrad:&lt;/strong> Adaptive gradient optimization algorithm.&lt;/li>
&lt;/ol>
&lt;h2 id="experimentation-and-tuning">Experimentation and Tuning
&lt;/h2>&lt;p>The optimization parameters for each technique are carefully tuned to achieve optimal performance. The model undergoes thorough experimentation to identify the best combination of hyperparameters and optimization algorithms for the given task.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>The Brain Tumour Classification project demonstrates the successful implementation of a fine-tuned VGG16 model for accurately classifying brain tumor images into four classes. The combination of image augmentation techniques and experimentation with various optimization algorithms contributes to the overall success of the project.&lt;/p>
&lt;p>For detailed implementation code and results, refer to the project &lt;a class="link" href="https://github.com/U77w41/Brain-Tumour-Classificaion/" target="_blank" rel="noopener"
>repository&lt;/a> and &lt;a class="link" href="https://github.com/U77w41/Brain-Tumour-Classificaion/blob/main/notebooks/Brain%20Tumor%20Classification%20CDS%20Project.ipynb" target="_blank" rel="noopener"
>notebooks&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://upload.wikimedia.org/wikipedia/commons/d/d8/Anaplastic_astrocytoma.jpgi" target="_blank" rel="noopener"
>Wikipedia&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Forcasting and Anomaly Detection</title><link>https://u77w41.github.io/p/forcasting-and-anomaly-detection/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://u77w41.github.io/p/forcasting-and-anomaly-detection/</guid><description>&lt;img src="https://u77w41.github.io/p/forcasting-and-anomaly-detection/forecasting.png" alt="Featured image of post Forcasting and Anomaly Detection" />&lt;p>**&lt;a class="link" href="https://github.com/U77w41/Forcasting-and-Anomaly-Detection" target="_blank" rel="noopener"
>GitHub Repo&lt;/a>&lt;/p>
&lt;h2 id="forecasting-techniques">Forecasting Techniques:
&lt;/h2>&lt;h3 id="regression-techniques">Regression Techniques
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Polynomial Regression:&lt;/strong> Leveraging the flexibility of polynomial functions to capture non-linear relationships in the data.&lt;/li>
&lt;li>&lt;strong>Multiple Linear Regression:&lt;/strong> Utilizing multiple features to model the sales data and uncover complex dependencies.&lt;/li>
&lt;li>&lt;strong>Lasso Linear Regression:&lt;/strong> Introducing L1 regularization to encourage sparsity in the model, selecting only the most influential features.&lt;/li>
&lt;li>&lt;strong>Ridge Linear Regression:&lt;/strong> Applying L2 regularization to prevent overfitting and improve the generalization of the model.&lt;/li>
&lt;li>&lt;strong>Elastic Net Regression:&lt;/strong> Combining L1 and L2 regularization to harness the strengths of both techniques.&lt;/li>
&lt;/ul>
&lt;h3 id="time-series-forecasting">Time Series Forecasting
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>ARMA (AutoRegressive Moving Average):&lt;/strong> Employing ARMA models to understand and predict the temporal patterns in Walmart sales data.&lt;/li>
&lt;/ul>
&lt;h2 id="anomaly-detection-techniques">Anomaly Detection Techniques:
&lt;/h2>&lt;h3 id="anomaly-detection-techniques-using-unsupervised-learning-approaches">Anomaly Detection Techniques using Unsupervised Learning Approaches
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>KNN Regressor:&lt;/strong> Utilizing the K-nearest neighbors algorithm to detect anomalies based on the deviation from the expected sales values.&lt;/li>
&lt;li>&lt;strong>DBSCAN (Density-Based Spatial Clustering of Applications with Noise):&lt;/strong> Identifying anomalies by clustering the sales data and isolating points that do not conform to any cluster.&lt;/li>
&lt;li>&lt;strong>LSTM with Autoencoders:&lt;/strong> Leveraging Long Short-Term Memory networks combined with autoencoders for capturing complex temporal dependencies and detecting anomalies in the sales data.&lt;/li>
&lt;/ul>
&lt;h2 id="data-version-control-dvc">Data Version Control (DVC)
&lt;/h2>&lt;p>To maintain the integrity and traceability of our project, we adopted the Data Version Control (DVC) Python library. DVC facilitated the versioning of our data, ensuring reproducibility and providing a robust framework for collaboration.&lt;/p>
&lt;p>This project represents a holistic exploration of machine learning techniques for forecasting and anomaly detection, combining traditional regression methods with cutting-edge time series forecasting and unsupervised learning approaches.&lt;/p></description></item></channel></rss>